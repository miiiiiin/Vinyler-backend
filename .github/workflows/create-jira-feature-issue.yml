
name: Sync issues to jira
on:
  issues:
    types:
      - opened
      - edited
jobs:
  determine-label:
    runs-on: ubuntu-latest
    outputs:
      issue_type: ${{ steps.set-label.outputs.issue_type }}
      template_path: ${{ steps.set-label.outputs.template_path }}
    steps:
      - name: Determine issue type
        id: set-label
        run: |
          RAW_LABELS=$(echo '${{ toJson(github.event.issue.labels) }}' | jq -r '.[].name')
          
          TEMPLATE_PATH=""
          
          if echo "$RAW_LABELS" | grep -q "새로운 기능"; then
            echo "issue_type=feature" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::feature"
            TEMPLATE_PATH=".github/ISSUE_TEMPLATE/이슈템플릿.yml"
          elif echo "$RAW_LABELS" | grep -q "버그"; then
            echo "issue_type=bug" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::bug"
            TEMPLATE_PATH=".github/ISSUE_TEMPLATE/버그이슈-템플릿.yml"
          elif echo "$RAW_LABELS" | grep -q "요청"; then
            echo "issue_type=request" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::request"
            TEMPLATE_PATH=".github/ISSUE_TEMPLATE/이슈템플릿.yml"
          else
            echo "issue_type=none" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::none"
          fi
        shell: bash
        
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    needs: determine-label
    if: needs.determine-label.outputs.issue_type != 'none'
    permissions:
      contents: write  # 저장소 콘텐츠 접근 권한
      issues: write    # 이슈 생성 및 수정 권한
      pull-requests: write  # PR 생성 및 수정 권한
    steps:        
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Issue Parser
        if: env.SKIP != 'true'
        uses: stefanbuck/github-issue-praser@v3
        id: issue-parser
        with:
          template-path: ${{ needs.determine-label.outputs.template_path }}

      - name: Log Issue Parser
        run: |
          echo '${{ steps.issue-parser.outputs.jsonString }}'

      # - name: Convert markdown to Jira Syntax
      #   uses: peter-evans/jira2md@v1
      #   id: md2jira
      #   with:
      #     input-text: |
      #       ### Github Issue Link
      #       - ${{ github.event.issue.html_url }}

      #       ${{ github.event.issue.body }}
      #     mode: md2jira

      - name: Extract Labels
        id: extract-labels
        run: |
          RAW_LABELS=$(cat <<EOF
          ${{ toJson(github.event.issue.labels) }}
          EOF
          )
          CLEAN_LABELS=$(echo "$RAW_LABELS" | jq -c '[.[].name | gsub(" "; "-")]')
          echo "JIRA_LABELS=$CLEAN_LABELS" >> $GITHUB_ENV
          echo "Extracted Labels: $CLEAN_LABELS"
        shell: bash

      - name: Debug Labels
        run: echo "JIRA_LABELS=${{ env.JIRA_LABELS }}"

      - name: Get existing Jira issue
        id: get-jira-issue
        run: |
          # GitHub Issue 제목 가져오기
          ISSUE_TITLE=$(jq -r '.issue.title' "$GITHUB_EVENT_PATH")
          
          # JQL 쿼리를 동적으로 설정
          JQL_QUERY="project=VNR AND summary~\"$(echo $ISSUE_TITLE | sed 's/[][():]/ /g')\""
          echo "🔍 JQL Query: $JQL_QUERY"
      
          # Jira API 호출하여 기존 이슈 검색
          RESPONSE=$(curl -s -u "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -X GET -H "Content-Type: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/search?jql=$(echo $JQL_QUERY | jq -sRr @uri)")
      
          # Jira 이슈 키 추출
          JIRA_ISSUE_KEY=$(echo "$RESPONSE" | jq -r '.issues[0].key // empty')
      
          if [[ -n "$JIRA_ISSUE_KEY" ]]; then
            echo "📌 기존 Jira Issue 발견: $JIRA_ISSUE_KEY"
          else
            echo "🆕 기존 Jira Issue 없음, 새로 생성 예정"
          fi
          
          # 환경 변수 설정
          echo "JIRA_ISSUE_KEY=$JIRA_ISSUE_KEY" >> $GITHUB_ENV
        shell: bash


      - name: Convert Markdown to ADF (Jira Format)
        id: convert-adf
        run: |
          convert_md_to_adf() {
            echo -e "$1" | sed -E \
              -e 's/^### (.*)$/{"type": "heading", "attrs": {"level": 3}, "content": [{"t$
              -e 's/^## (.*)$/{"type": "heading", "attrs": {"level": 2}, "content": [{"ty$
              -e 's/^# (.*)$/{"type": "heading", "attrs": {"level": 1}, "content": [{"typ$
              -e 's/\*\*(.*)\*\*/{"type": "text", "marks": [{"type": "strong"}], "text": $
              -e 's/\*(.*)\*/{"type": "text", "marks": [{"type": "em"}], "text": "\1"}/g'$
              -e 's/^> (.*)$/{"type": "blockquote", "content": [{"type": "paragraph", "co$
              -e 's/^[-*] (.*)$/{"type": "listItem", "content": [{"type": "paragraph", "c$
              | jq -R -s .  # JSON 배열로 변환
          }
      
          DESCRIPTION_RAW=$(cat <<EOF
          ### Github Issue Link
          - ${{ github.event.issue.html_url }}
      
          ${{ github.event.issue.body }}
          EOF
          )

          echo "📌 Raw Markdown Input:"
          echo "$DESCRIPTION_RAW"
          echo ""
          
          # Markdown -> ADF 변환
          DESCRIPTION_ADF=$(convert_md_to_adf "$DESCRIPTION_RAW")
          
          echo "📌 Converted ADF JSON Output:"
          echo "$DESCRIPTION_ADF"
          echo ""
          
          # JSON 유효성 검사
          if ! echo "$DESCRIPTION_ADF" | jq empty >/dev/null 2>&1; then
            echo "❌ Invalid JSON detected in DESCRIPTION_ADF!"
            exit 1
          fi

          # JSON 배열을 포함하는 ADF 최종 변환
          DESCRIPTION_JSON=$(echo "$DESCRIPTION_ADF" | jq -s '{ "type": "doc", "version":$
          
          echo "📌 Final ADF JSON Output:"
          echo "$DESCRIPTION_JSON"
          
          # JSON 최종 유효성 검사
          if ! echo "$DESCRIPTION_JSON" | jq empty >/dev/null 2>&1; then
            echo "❌ Invalid JSON detected in DESCRIPTION_JSON!"
            exit 1
          fi

      
          # JSON 배열을 사용하도록 보장
          DESCRIPTION_JSON=$(echo "$DESCRIPTION_ADF" | jq -s '{ "type": "doc", "version": 1, "content": . }')
      
          echo "JIRA_DESCRIPTION=$DESCRIPTION_JSON" >> $GITHUB_ENV
        shell: bash


      - name: Create or Update Jira Issue
        run: |
          # Jira에 맞게 Markdown을 Jira Wiki 문법으로 변환한 후 JSON 형태로 변환
          
          DESCRIPTION=$(jq -Rs . <<< "${{ steps.md2jira.outputs.output-text }}")
          echo "📌 Final DESCRIPTION payload: $DESCRIPTION"
          echo "🔍 Raw JIRA_LABELS: '${{ env.JIRA_LABELS }}'"

          # JIRA_LABELS 값이 이미 JSON 배열이면 그대로 사용
          if echo '${{ env.JIRA_LABELS }}' | jq -e . >/dev/null 2>&1; then
            JIRA_LABELS_JSON='${{ env.JIRA_LABELS }}'
          else
            # JSON이 아니면 강제로 JSON 배열로 변환
            JIRA_LABELS_JSON=$(echo '${{ env.JIRA_LABELS }}' | sed 's/^\[\(.*\)\]$/\1/' | jq -R 'split(",") | map(gsub("^ *"; "") | gsub(" *$"; "") | tostring)')
          fi
          
          # JSON 유효성 검사
          if ! echo "$JIRA_LABELS_JSON" | jq empty >/dev/null 2>&1; then
            echo "❌ Invalid JSON detected in JIRA_LABELS_JSON! Using default empty array."
            JIRA_LABELS_JSON='[]'
          fi
          
          echo "📌 Converted JIRA_LABELS_JSON: $JIRA_LABELS_JSON"

          if [ -n "$JIRA_ISSUE_KEY" ]; then
            echo "🔄 기존 Jira Issue($JIRA_ISSUE_KEY) 업데이트 중..."
      
            # Jira ADF 형식으로 변환
            JSON_PAYLOAD=$(jq -n \
              --arg summary "${{ github.event.issue.title }}" \
              --argjson labels "$JIRA_LABELS_JSON" \
              --argjson description "${{ env.JIRA_DESCRIPTION }}" \
              '{
                fields: {
                  summary: $summary,
                  labels: $labels,
                  description: $description
                  # description: {
                  #   "type": "doc",
                  #   "version": 1,
                  #   "content": [
                  #     {
                  #       "type": "paragraph",
                  #       "content": [
                  #         {
                  #           "type": "text",
                  #           "text": $description
                  #         }
                  #       ]
                  #     }
                  #   ]
                  # }
                  # description: {
                  #   "type": "doc",
                  #   "version": 1,
                  #   "content": $description
                  # }
                }
              }')
      
            echo "📌 Final JSON Payload: $JSON_PAYLOAD"
      
            RESPONSE=$(curl -s --request PUT \
              --url "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_ISSUE_KEY" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Accept: application/json" \
              --header "Content-Type: application/json" \
              --data "$JSON_PAYLOAD")
      
            echo "📌 Jira API Response: $RESPONSE"
          fi
        shell: bash
        
      - name: Create Issue
        if: env.JIRA_ISSUE_KEY == ''
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: VNR
          issuetype: Task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "labels": ${{ env.JIRA_LABELS }}
            }

      - name: Log created issue
        run: echo "Jira Issue ${{ steps.issue-parser.outputs.parentKey }}/${{ steps.create.outputs.issue }} was created"

      - name: Checkout develop code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Configure Git Credentials
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/miiiiiin/Vinyler-backend.git

      - name: Update issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: "update-issue"
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "${{ github.event.issue.title }}"
