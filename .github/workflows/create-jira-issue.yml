
name: Sync issues to jira
on:
  issues:
    types:
      - opened
jobs:
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 저장소 콘텐츠 접근 권한
      issues: write    # 이슈 생성 및 수정 권한
      pull-requests: write  # PR 생성 및 수정 권한
    steps:
      - name: Determine Label and Set Template
        id: determine-label
        run: |
          RAW_LABELS=$(echo '${{ toJson(github.event.issue.labels) }}' | jq -r '.[].name')
          echo "Labels: $RAW_LABELS"

          if echo "$RAW_LABELS" | grep -q "새로운 기능"; then
            echo "TEMPLATE_PATH=.github/ISSUE_TEMPLATE/이슈템플릿.yml" >> $GITHUB_ENV
          elif echo "$RAW_LABELS" | grep -q "버그"; then
            echo "TEMPLATE_PATH=.github/ISSUE_TEMPLATE/버그이슈-템플릿.yml" >> $GITHUB_ENV
          # elif echo "$RAW_LABELS" | grep -q "요청"; then
          #   echo "TEMPLATE_PATH=.github/ISSUE_TEMPLATE/request_issues_template.yml" >> $GITHUB_ENV
          else
            echo "SKIP=true" >> $GITHUB_ENV
          fi
        shell: bash
        
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Issue Parser
        if: env.SKIP != 'true'
        uses: stefanbuck/github-issue-praser@v3
        id: issue-parser
        with:
          template-path: ${{ env.TEMPLATE_PATH }}
          

      - name: Log Issue Parser
        run: |
          echo '${{ steps.issue-parser.outputs.jsonString }}'

      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}

            ${{ github.event.issue.body }}
          mode: md2jira

      - name: Extract Labels
        id: extract-labels
        run: |
          RAW_LABELS=$(cat <<EOF
          ${{ toJson(github.event.issue.labels) }}
          EOF
          )
          CLEAN_LABELS=$(echo "$RAW_LABELS" | jq -c '[.[].name]')
          echo "JIRA_LABELS=$CLEAN_LABELS" >> $GITHUB_ENV
          echo "Extracted Labels: $CLEAN_LABELS"
        shell: bash

      - name: Debug Labels
        run: echo "JIRA_LABELS=${{ env.JIRA_LABELS }}"
        
      - name: Create Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: VNR
          issuetype: Task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "labels": ${{ env.JIRA_LABELS }}
            }

      - name: Log created issue
        run: echo "Jira Issue ${{ steps.issue-parser.outputs.parentKey }}/${{ steps.create.outputs.issue }} was created"

      - name: Checkout develop code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Configure Git Credentials
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/miiiiiin/Vinyler-backend.git

      - name: Update issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: "update-issue"
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "${{ steps.create.outputs.issue }} ${{ github.event.issue.title }}"
