
name: Sync issues to jira
on:
  issues:
    types:
      - labeled
jobs:
  
  determine-label:
    runs-on: ubuntu-latest
    outputs:
      issue_type: ${{ steps.set-label.outputs.issue_type }}
      template_path: ${{ steps.set-label.outputs.template_path }}
    steps:
      - name: Determine issue type
        id: set-label
        run: |
          # GitHub Actions의 JSON 데이터를 안전하게 가져오기
          LABELS_JSON=$(echo '${{ toJson(github.event.issue.labels) }}' | jq -c '.' 2>/dev/null || echo "[]")

          echo "Received Labels JSON: $LABELS_JSON"

          # 만약 LABELS_JSON이 비어있거나 null이면 빈 값으로 설정
          if [ -z "$LABELS_JSON" ] || [ "$LABELS_JSON" = "null" ]; then
            LABELS_JSON="[]"
          fi

          # 라벨 목록을 문자열로 변환하여 처리
          RAW_LABELS=$(echo "$LABELS_JSON" | jq -r '.[].name' 2>/dev/null || echo "")

          # 레이블 확인 및 분기 처리
          if echo "$RAW_LABELS" | grep -q "새로운 기능"; then
            echo "issue_type=feature" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::feature"
            echo "template_path=.github/ISSUE_TEMPLATE/feature_issues_template.yml" >> "$GITHUB_ENV"
            echo "::set-output name=template_path::.github/ISSUE_TEMPLATE/feature_issues_template.yml"
          elif echo "$RAW_LABELS" | grep -q "버그"; then
            echo "issue_type=bug" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::bug"
            echo "template_path=.github/ISSUE_TEMPLATE/bug_issues_template.yml" >> "$GITHUB_ENV"
            echo "::set-output name=template_path::.github/ISSUE_TEMPLATE/bug_issues_template.yml"
          elif echo "$RAW_LABELS" | grep -q "요청"; then
            echo "issue_type=request" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::request"
            echo "template_path=.github/ISSUE_TEMPLATE/request_issues_template.yml" >> "$GITHUB_ENV"
            echo "::set-output name=template_path::.github/ISSUE_TEMPLATE/request_issues_template.yml"
          else
            echo "issue_type=none" >> "$GITHUB_ENV"
            echo "::set-output name=issue_type::none"
          fi
        shell: bash
        
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    needs: determine-label
    if: needs.determine-label.outputs.issue_type != 'none'
    permissions:
      contents: write  # 저장소 콘텐츠 접근 권한
      issues: write    # 이슈 생성 및 수정 권한
      pull-requests: write  # PR 생성 및 수정 권한
    steps:        
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Issue Parser
        if: env.SKIP != 'true'
        uses: stefanbuck/github-issue-praser@v3
        id: issue-parser
        with:
          template-path: ${{ needs.determine-label.outputs.template_path }}

      - name: Log Issue Parser
        run: |
          echo '${{ steps.issue-parser.outputs.jsonString }}'

      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}

            ${{ github.event.issue.body }}
          mode: md2jira

      - name: Extract Labels
        id: extract-labels
        run: |
          RAW_LABELS=$(cat <<EOF
          ${{ toJson(github.event.issue.labels) }}
          EOF
          )
          CLEAN_LABELS=$(echo "$RAW_LABELS" | jq -c '[.[].name | gsub(" "; "-")]')
          echo "JIRA_LABELS=$CLEAN_LABELS" >> $GITHUB_ENV
          echo "Extracted Labels: $CLEAN_LABELS"
        shell: bash

      - name: Debug Labels
        run: echo "JIRA_LABELS=${{ env.JIRA_LABELS }}"
        
      - name: Create Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: VNR
          issuetype: Task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "labels": ${{ env.JIRA_LABELS }}
            }

      - name: Log created issue
        run: echo "Jira Issue ${{ steps.issue-parser.outputs.parentKey }}/${{ steps.create.outputs.issue }} was created"

      - name: Checkout develop code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Configure Git Credentials
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/miiiiiin/Vinyler-backend.git

      - name: Update issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: "update-issue"
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "${{ steps.create.outputs.issue }} ${{ github.event.issue.title }}"
